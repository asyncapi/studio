(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{8751:function(e,n,t){Promise.resolve().then(t.bind(t,265))},265:function(e,n,t){"use strict";t.r(n),t.d(n,{Editor:function(){return y}});var s=t(7573),r=t(3265);let i="\nasyncapi: 3.0.0\ninfo:\n  title: Streetlights Kafka API\n  version: 1.0.0\n  description: |-\n    The Smartylighting Streetlights API allows you to remotely manage the city\n    lights.\n    ### Check out its awesome features:\n\n    * Turn a specific streetlight on/off \uD83C\uDF03  \n    * Dim a specific streetlight \uD83D\uDE0E\n    * Receive real-time information about environmental lighting conditions \uD83D\uDCC8\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\ndefaultContentType: application/json\nservers:\n  scram-connections:\n    host: test.mykafkacluster.org:18092\n    protocol: kafka-secure\n    description: Test broker secured with scramSha256\n    security:\n      - $ref: '#/components/securitySchemes/saslScram'\n    tags:\n      - name: env:test-scram\n        description: >-\n          This environment is meant for running internal tests through\n          scramSha256\n      - name: kind:remote\n        description: This server is a remote server. Not exposed by the application\n      - name: visibility:private\n        description: This resource is private and only available to certain users\n  mtls-connections:\n    host: test.mykafkacluster.org:28092\n    protocol: kafka-secure\n    description: Test broker secured with X509\n    security:\n      - $ref: '#/components/securitySchemes/certs'\n    tags:\n      - name: env:test-mtls\n        description: This environment is meant for running internal tests through mtls\n      - name: kind:remote\n        description: This server is a remote server. Not exposed by the application\n      - name: visibility:private\n        description: This resource is private and only available to certain users\nchannels:\n  lightingMeasured:\n    address: smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured\n    messages:\n      lightMeasured:\n        $ref: '#/components/messages/lightMeasured'\n    description: The topic on which measured values may be produced and consumed.\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightTurnOn:\n    address: smartylighting.streetlights.1.0.action.{streetlightId}.turn.on\n    messages:\n      turnOn:\n        $ref: '#/components/messages/turnOnOff'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightTurnOff:\n    address: smartylighting.streetlights.1.0.action.{streetlightId}.turn.off\n    messages:\n      turnOff:\n        $ref: '#/components/messages/turnOnOff'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightsDim:\n    address: smartylighting.streetlights.1.0.action.{streetlightId}.dim\n    messages:\n      dimLight:\n        $ref: '#/components/messages/dimLight'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\noperations:\n  receiveLightMeasurement:\n    action: receive\n    channel:\n      $ref: '#/channels/lightingMeasured'\n    summary: >-\n      Inform about environmental lighting conditions of a particular\n      streetlight.\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightingMeasured/messages/lightMeasured'\n  turnOn:\n    action: send\n    channel:\n      $ref: '#/channels/lightTurnOn'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightTurnOn/messages/turnOn'\n  turnOff:\n    action: send\n    channel:\n      $ref: '#/channels/lightTurnOff'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightTurnOff/messages/turnOff'\n  dimLight:\n    action: send\n    channel:\n      $ref: '#/channels/lightsDim'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightsDim/messages/dimLight'\ncomponents:\n  messages:\n    lightMeasured:\n      name: lightMeasured\n      title: Light measured\n      summary: >-\n        Inform about environmental lighting conditions of a particular\n        streetlight.\n      contentType: application/json\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/lightMeasuredPayload'\n    turnOnOff:\n      name: turnOnOff\n      title: Turn on/off\n      summary: Command a particular streetlight to turn the lights on or off.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/turnOnOffPayload'\n    dimLight:\n      name: dimLight\n      title: Dim light\n      summary: Command a particular streetlight to dim the lights.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/dimLightPayload'\n  schemas:\n    lightMeasuredPayload:\n      type: object\n      properties:\n        lumens:\n          type: integer\n          minimum: 0\n          description: Light intensity measured in lumens.\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    turnOnOffPayload:\n      type: object\n      properties:\n        command:\n          type: string\n          enum:\n            - 'on'\n            - 'off'\n          description: Whether to turn on or off the light.\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    dimLightPayload:\n      type: object\n      properties:\n        percentage:\n          type: integer\n          description: Percentage to which the light should be dimmed to.\n          minimum: 0\n          maximum: 100\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    sentAt:\n      type: string\n      format: date-time\n      description: Date and time when the message was sent.\n  securitySchemes:\n    saslScram:\n      type: scramSha256\n      description: Provide your username and password for SASL/SCRAM authentication\n    certs:\n      type: X509\n      description: Download the certificate files from service provider\n  parameters:\n    streetlightId:\n      description: The ID of the streetlight.\n  messageTraits:\n    commonHeaders:\n      headers:\n        type: object\n        properties:\n          my-app-header:\n            type: integer\n            minimum: 0\n            maximum: 100\n  operationTraits:\n    kafka:\n      bindings:\n        kafka:\n          clientId:\n            type: string\n            enum:\n              - my-app-id\n",a=(0,r.Ue)(e=>({files:{asyncapi:{uri:"asyncapi",name:"asyncapi",content:i,from:"storage",source:void 0,language:"{"===i.trimStart()[0]?"json":"yaml",modified:!1,stat:{mtime:new Date().getTime()}}},updateFile(n,t){e(e=>({files:{...e.files,[String(n)]:{...e.files[String(n)]||{},...t}}}))}}));var o=t(188),m=t(8368),c=t(6368),l=t(7653),h=t(907),d=t(1009),g=t(13),u=t(2435),f=t(9853);let p=e=>{let{language:n,value:t,onChange:r,autoFocus:i,className:a}=e,p=(0,l.useRef)(null),y=(0,l.useRef)();return(0,l.useEffect)(()=>{let e;if(window&&r(e=localStorage.getItem("document")||t),p.current){let t=o.tk.theme({"&":{backgroundColor:"#252f3f",color:"#fff"},"&.cm-editor":{height:"100%",width:"100%"},"&.cm-focused":{backgroundColor:"#1f2a37"}}),s=c.yy.create({doc:e,extensions:[m.Xy,t,o.$f.of([f.oc]),h.pD,(0,u.nF)(h.VE),"json"===n?(0,d.AV)():(0,g.r)(),o.tk.updateListener.of(e=>(e.docChanged&&(r(e.state.doc.toString()),void 0!==window&&localStorage.setItem("document",e.state.doc.toString())),!1))]});return y.current=new o.tk({parent:p.current,state:s}),i&&y.current.focus(),()=>{var e;null===(e=y.current)||void 0===e||e.destroy()}}},[n]),(0,s.jsx)("div",{ref:p,className:"".concat(a," flex-grow relative overflow-auto")})},y=e=>{let{language:n,content:t}=a(e=>e.files.asyncapi),r=a(e=>e.updateFile);return(0,s.jsx)("div",{className:"flex flex-1 overflow-hidden",children:(0,s.jsx)(p,{language:n,value:t,onChange:e=>r("asyncapi",{content:e})})})}}},function(e){e.O(0,[906,726,293,858,744],function(){return e(e.s=8751)}),_N_E=e.O()}]);